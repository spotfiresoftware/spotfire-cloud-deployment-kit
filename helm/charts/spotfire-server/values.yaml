# -- (bool) Accept the [Cloud Software Group, Inc. End User Agreement](https://www.cloud.com/legal/terms) by setting the value to `true`.
acceptEUA:

# ===============================
# image settings
# ===============================

# spotfire-global image settings
global:
  spotfire:
    # -- (bool) Accept the [Cloud Software Group, Inc. End User Agreement](https://www.cloud.com/legal/terms) by setting the value to `true`.
    acceptEUA:
    image:
      # -- The global container image registry. Used for  container images unless overridden.
      registry:
      # -- The global container image pull policy.
      pullPolicy: IfNotPresent
      # -- The global container image pull secrets.
      ## E.g.
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []

# spotfire-server image settings
image:
  # -- The image registry for spotfire-server. Overrides `global.spotfire.image.registry` value.
  registry:
  # -- The spotfire-server image repository.
  repository: spotfire/spotfire-server
  # -- The container image tag to use.
  tag: "14.1.0-2.1.0"
  # -- The spotfire-server image pull policy. Overrides `global.spotfire.image.pullPolicy`.
  pullPolicy:
  ## Optionally specify an array of imagePullSecrets.
  # -- spotfire-server image pull secrets.
  pullSecrets: []

fluentBitSidecar:
  image:
    # -- The image repository for fluent-bit logging sidecar.
    repository: fluent/fluent-bit
    # -- The image tag to use for fluent-bit logging sidecar.
    tag: "2.1.10"
    # -- The image pull policy for the fluent-bit logging sidecar image.
    pullPolicy: IfNotPresent

  # -- The securityContext setting for fluent-bit sidecar container. Overrides any securityContext setting on the Pod level.
  # More info: `kubectl explain pod.spec.securityContext`
  securityContext: {}

# Also see cliPod.image & configJob.image settings.

# ===============================
# various generic chart settings
# ===============================

# -- The number of Spotfire Server containers.
replicaCount: 1

service:
  ## -- The spotfire server service type. It should be set to ClusterIP when haproxy is enabled (haproxy.enabled).
  type: ClusterIP
  ## -- It should be set to None when haproxy is enabled (haproxy.enabled)
  clusterIP: None

serviceAccount:
  # Specifies whether to use a service account.
  create: true
  # Annotations to add to the service account.
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, then a name is generated using the fullname template.
  name: ""

podAnnotations:
  prometheus.io/path: /spotfire/metrics
  prometheus.io/port: "9080"
  prometheus.io/scrape: "true"

# -- The Pod securityContext setting applies to all the containers inside the Pod.
# More info: `kubectl explain deployment.spec.template.spec.securityContext`
podSecurityContext: {}

# -- The securityContext setting for spotfire-server container. Overrides any securityContext setting on the Pod level.
# More info: `kubectl explain deployment.spec.template.spec.containers.securityContext`
securityContext: {}

## Spotfire Server startup, readiness, and liveness probe initial delay and timeout.
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
startupProbe:
  enabled: true
  httpGet:
    path: /spotfire/rest/status/getStatus
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  failureThreshold: 30
livenessProbe:
  enabled: true
  httpGet:
    path: /spotfire/rest/status/getStatus
    port: http
  periodSeconds: 3
  failureThreshold: 3
readinessProbe:
  enabled: false

ingress:
  # -- Enables configuration of ingress to expose Spotfire Server. Requires ingress support in the Kubernetes cluster.
  enabled: false
  hosts:
      - host: "spotfire.local"
        paths:
        - path: /
          pathType: Prefix
  # -- Annotations for the ingress object. See documentation for your ingress controller for valid annotations.
  annotations: {}
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This increases chances that charts can run on environments with few
  # resources, such as Minikube. If you do want to specify resources, then uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- KEDA autoscaling configuration. See https://keda.sh/docs/latest/concepts/scaling-deployments for more details.
# @default -- Disabled
kedaAutoscaling:
  enabled: false
  # -- The interval to check each trigger on.
  pollingInterval: 30
  # -- The period to wait after the last trigger reported active before scaling the resource back to 0.
  cooldownPeriod: 300
  # -- The minimum number of replicas KEDA scales the resource down to.
  minReplicas: 1
  # -- This setting is passed to the HPA definition that KEDA creates for a given resource and holds the maximum number of replicas of the target resource.
  maxReplicas: 4
  threshold:
  fallback: {}
  triggers: []
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  # -- Spotfire specific settings.
  spotfireConfig:
    # -- REQUIRED. The URL to the Prometheus server where metrics should be fetched from.
    prometheusServerAddress: http://prometheus-server.monitor.svc.cluster.local

nodeSelector: {}

tolerations: []

affinity: {}

# -- Additional environment variables that all spotfire-server pods use.
extraEnvVars: []
#  - name: NAME
#    value: value

# The name of the ConfigMap containing extra environment variables all spotfire-server pods.
extraEnvVarsCM: ""

# The name of the Secret containing extra environment variables all spotfire-server pods.
extraEnvVarsSecret: ""

# -- Additional init containers to add to Spotfire server pod.
# More info: `kubectl explain deployment.spec.template.spec.initContainers`
extraInitContainers: []

# -- Extra volumeMounts for the spotfire-server container.
# More info: `kubectl explain deployment.spec.template.spec.containers.volumeMounts`
extraVolumeMounts: []

# -- Extra volumes for the spotfire-server container.
# More info: `kubectl explain deployment.spec.template.spec.volumes`
extraVolumes: []

# ===============================
# cliPod
# ===============================

cliPod:
  # Enable or disable the spotfire-cli interactive configuration command line interface.
  enabled: true
  # -- Set to DEBUG or TRACE to increase log level. Defaults to INFO if unset.
  logLevel: ""
  # -- Additional environment variables all spotfire-server pods use.
  #  - name: NAME
  #    value: value
  extraEnvVars: []
  # The name of the ConfigMap containing extra environment variables all spotfire-server pods use.
  extraEnvVarsCM: ""
  # The name of the Secret containing extra environment variables all spotfire-server pods use.
  extraEnvVarsSecret: ""
  # -- Extra volumeMounts for the configJob Job.
  # More info: `kubectl explain deployment.spec.template.spec.containers.volumeMounts`
  extraVolumeMounts: []
  # -- Extra volumes for the configJob Job.
  # More info: `kubectl explain deployment.spec.template.spec.volumes`
  extraVolumes: []
  # -- Additional init containers to add to cli pod.
  # More info: `kubectl explain deployment.spec.template.spec.initContainers`
  extraInitContainers: []
  # -- The securityContext setting for cliPod.
  # More info: `kubectl explain deployment.spec.template.spec.containers.securityContext`
  securityContext: {}
  # -- The podSecurityContext setting for cliPod
  # More info: `kubectl explain deployment.spec.template.spec.securityContext`
  podSecurityContext: {}
  # -- Podannotations for cliPod
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  image:
    # -- The image registry for spotfireConfig. Overrides global.spotfire.image.registry value.
    registry:
    # -- The spotfireConfig image repository.
    repository: spotfire/spotfire-config
    # -- The spotfireConfig container image tag to use.
    tag: "14.1.0-2.1.0"
    # -- The spotfireConfig image pull policy. Overrides global.spotfire.image.pullPolicy.
    pullPolicy:
    #  -- The spotfireConfig image pull secrets.
    pullSecrets: []

# ===============================
# configJob pods settings
# ===============================

configJob:
  # -- Set to `DEBUG` or `TRACE` to increase log level. Defaults to `INFO` if unset.
  logLevel: ""
  # -- Set the length of time in seconds to keep job and its logs until the job is removed.
  ttlSecondsAfterFinished: 3600
  # -- Additional environment variables for all spotfire-server pods to use.
  #  - name: NAME
  #    value: value
  extraEnvVars: []
  # The name of the ConfigMap containing the extra environment variables all spotfire-server pods use.
  extraEnvVarsCM: ""
  # The name of the Secret containing extra environment variables all spotfire-server pods use.
  extraEnvVarsSecret: ""
  # -- Extra volumeMounts for the configJob Job.
  # More info: `kubectl explain job.spec.template.spec.containers.volumeMounts`
  extraVolumeMounts: []
  # -- Extra volumes for the configJob Job.
  # More info: `kubectl explain job.spec.template.spec.volumes`
  extraVolumes: []
  # -- Additional init containers to add to the Spotfire server configuration pod.
  # More info: `kubectl explain job.spec.template.spec.initContainers`
  extraInitContainers: []
  # -- The securityContext setting for configJob.
  # More info: `kubectl explain job.spec.template.spec.containers.securityContext`
  securityContext: {}
  # -- The podSecurityContext setting for configJob.
  # More info: `kubectl explain job.spec.template.spec.securityContext`
  podSecurityContext: {}
  # -- Podannotations for configJob
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  image:
    # -- The image registry for spotfireConfig. Overrides `global.spotfire.image.registry` value.
    registry:
    # -- The spotfireConfig image repository.
    repository: spotfire/spotfire-config
    # -- The spotfireConfig container image tag to use.
    tag: "14.1.0-2.1.0"
    # -- The spotfireConfig image pull policy. Overrides `global.spotfire.image.pullPolicy` value.
    pullPolicy:
    #  -- The spotfireConfig image pull secrets.
    pullSecrets: []

# ===============================
# Spotfire specific volumes
# ===============================

volumes:
  troubleshooting:
    persistentVolumeClaim:
       # -- If `true`, then a `PersistentVolumeClaim` (PVC) is created.
      create: false
      # -- Specifies the name of the `StorageClass` that to use for the `volumes.troubleshooting` PVC.
      storageClassName: ""
      # -- Specifies the standard K8s resource requests and/or limits for the `volumes.troubleshooting` PVC.
      resources:
        requests:
          storage: 2Gi
      # -- Specifies the name of the persistent volume to use for the `volumes.troubleshooting` PVC.
      volumeName:
    # -- When `persistentVolumeClaim.create` is `false`, then use this value to define an already-existing PVC.
    existingClaim: ""

  # The volume with mountPath: /opt/spotfire/spotfireserver/tomcat/application-data/library
  libraryImportExport:
    persistentVolumeClaim:
       # -- If `true`, then a `PersistentVolumeClaim` (PVC) is created.
      create: false
      # -- Specifies the name of the `StorageClass` to use for the `volumes.libraryImportExport` PVC.
      storageClassName: ""
      # -- Specifies the standard Kubernetes resource requests and/or limits for the `volumes.libraryImportExport` PVC.
      resources:
        requests:
          storage: 1Gi
      # -- Specifies the name of the persistent volume to use for the `volumes.libraryImportExport` PVC.
      volumeName:
    # -- When `persistentVolumeClaim.create` is `false`, then this value is used to define an already-existing PVC.
    existingClaim: ""
    # -- The subPath of the volume to be used for the volume mount
    subPath: ""

  # The volume with mountPath: `/opt/spotfire/spotfireserver/tomcat/custom-ext`
  customExt:
    # -- Defines an already-existing persistent volume claim.
    existingClaim: ""
    # -- The subPath of the volume to be used for the volume mount
    subPath: ""

  # The volume with mountPath: `/opt/spotfire/spotfireserver/tomcat/custom-ext-informationservices`
  customExtInformationservices:
    # -- Defines an already-existing persistent volume claim.
    existingClaim: ""
    # -- The subPath of the volume to be used for the volume mount
    subPath: ""

  # The volume with mountPath: `/opt/spotfire/spotfireserver/tomcat/certs`
  certificates:
    # Defines an already-existing persistent volume claim.
    existingClaim: ""
    # -- The subPath of the volume to be used for the volume mount
    subPath: ""

  # The volume with mountPath: `/opt/spotfire/spotfireconfigtool/deployments`
  deployments:
    # -- Defines an already-existing persistent volume claim.
    existingClaim: ""
    # -- The subPath of the volume to be used for the volume mount
    subPath: ""

# ===============================
# Spotfire application configuration
# ===============================

logging:
  # -- Specifies a logForwarderAddress. If left empty, then the default `log-forwarder` is used in the case where `log-forwarder.enabled=true`. Template.
  logForwarderAddress: ""
  # -- The Spotfire Server log-level. Set to `debug`, `trace`, `minimal` or leave empty for info.
  logLevel: ""

# -- The Spotfire config tool password to use for `bootstrap.xml`. If not provided, this password is automatically generated. The password is only used locally inside pods for use to together with the configuration and is not usable for anything outside the pod.
toolPassword: ""

database:
  # -- For details related to bootstrap properties, visit the product documentation [here](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/bootstrap.html).
  # @default -- -
  bootstrap:
    # -- The JDBC URL of the database to be used by Spotfire Server. Evaluated as a template.
    databaseUrl: "jdbc:postgresql://HOSTNAME/spotfire"
    #  -- The Java driver class of the JDBC driver to be used with underlying database.
    driverClass: "org.postgresql.Driver"
    # -- Username to be created for the Spotfire Server database.
    # If unset, the default value `spotfire` is used.
    username: "spotfire"
    # -- Password to be created for the Spotfire Server database.
    # If not provided, this password is automatically generated.
    password: ""
    # -- Read spotfire database password from an existing secret. If set, 'password' above is not used.
    # @default -- Not used unless .name is set
    passwordExistingSecret:
      ## -- Name of the secret. Evaluated as a template.
      name: ""
      ## -- Key to read the spotfire database password from. Evaluated as a template.
      key: SPOTFIREDB_PASSWORD
  # -- For details related to `create-db` cli properties, visit the product documentation [here](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/create-db.html).
  # create-db cli also uses properties from database.bootstrap section.
  # @default -- -
  create-db:
    # -- if set to true, Spotfire server schema will also get deployed with other installation.
    enabled: true
    # -- Admin username for the database server to be used as the Spotfire Server database.
    adminUsername: "postgres"
    # -- Admin password for the database server to be used as the Spotfire Server database.
    adminPassword: ""
    # -- Read admin password from an existing secret. If set, 'password' above is not used.
    # @default -- Not used unless .name is set
    adminPasswordExistingSecret:
      ## -- Name of the secret. Evaluated as a template.
      name: ""
      ## -- Key to read the database administrator password from. Evaluated as a template.
      key: DBSERVER_ADMIN_PASSWORD

    # -- Like `database.bootstrap.databaseUrl` but is used for the connection when creating the spotfire database. Evaluated as a template.
    databaseUrl: "jdbc:postgresql://HOSTNAME/"
    # -- Database name to be created to hold the Spotfire Server database schemas.
    spotfiredbDbname: "spotfire"
    # -- Set this to true, in case supported databases (AWS Postgres, Aurora Postgres, Azure Postgres, Google Cloud Postgres) does not allow user creation
    doNotCreateUser: false
    # -- For connecting to MS SQL or Oracle on Amazon RDS, specify `rds`, for MS SQL on Azure, specify `azure`, otherwise omit the option.
    variant: ""
    # -- Specify the value in case of Oracle database, otherwise keep it blank.
    oracleTablespacePrefix: ""
    # -- Specify the value in case of Oracle database, otherwise keep it blank.
    oracleRootfolder: ""
  # -- Often new Spotfire server version requires an upgraded database. If true, the database will be upgrade to match the server version being deployed.
  upgrade: true

configuration:
  # -- When to apply configurationScripts, commandScripts, admin user creation and action log settings.
  # Possible values:
  # * "always" = Apply on every `helm install` or `helm upgrade`. Note: Configuration made from other tools than helm might be overwritten when updating the helm release.
  # * "initialsetup" = Only apply if Spotfire server database does not already have a configuration. It is suitable for setting up the initial configuration of the environment but where further configuration is done using the spotfire configuration tool.
  # * "never" = Do not apply. Configuration must be configured using the spotfire configuration tool directly towards the database.
  apply: "initialsetup"

  # -- Run the configuration job steps starting from the currently active configuration or from the Spotfire default config (created with `config.sh create-default-config`).
  # If no current active configuration exists, the default config is used.
  # Note: When set to false, all configuration done with external tools other than helm will be overwritten on an upgrade.
  preferExistingConfig: false

  # -- The password for encrypting passwords that are stored in the database. If you do not set this option, then a static password is used. See \-\-encryption-password for the [bootstrap](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/bootstrap.html) command.
  encryptionPassword: ""

  # -- A list of configuration scripts to apply during helm installation. Each list item should have the keys `name` and `script`.
  # See [config.sh run script](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/scripting_a_configuration.html).
  # Commands in these scripts should operate only on a local `configuration.xml`.
  # Commands such as `set-config-prop` and `modify-ds-template` are examples of commands that can be used here.
  # The local `configuration.xml` file is automatically imported after all configuration steps run in the order in which they are defined below.
  configurationScripts: []
  # - name: my_configuration_script_name
  #   script: "my configuration script content"

  # -- A list of command scripts to run during helm installation.
  # These commands will run once only and not subsequent helm release upgrades. Each list item should have the keys `name` and `script`.
  # See [config.sh run script](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/scripting_a_configuration.html).
  # Commands in these scripts should NOT operate on `configuration.xml`.
  # Operations such as adding/removing users and assigning licenses are typical administrative commands that can be specified here.
  commandScripts: []
  # - name: my_command_script_name
  #   script: "my configuration script content"

  # -- The same as `commandScripts` but these command will be run before the configuration is imported.
  # On new installations the commands will be run before any spotfire servers are started, because spotfire server will not start before there is a configuration.
  preConfigCommandScripts: []
  # - name:
  #   script:

  spotfireAdmin:
    # -- Whether to create an admin user or not.
    create: true
    # -- The user to create for the Spotfire admin.
    username: "admin"
    # -- The password to create for the Spotfire admin. If not provided, this password is automatically generated.
    # Although possible, it is not recommended to change the user's password directly in the Spotfire administrative user interface because the password is reset to this value on every helm installation or upgrade.
    password: ""
    # -- Read password from an existing secret instead of from values. If set, 'password' above is not used.
    # @default -- Not used unless .name is set
    passwordExistingSecret:
      name: ""
      ## -- Key to read the password from. Evaluated as a template.
      key: SPOTFIREADMIN_PASSWORD

  # -- Site settings. See [sites](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/sites.html) for more information.
  # @default -- Spotfire Server joins the Default site.
  site:
    # -- The name of the site that the Spotfire Server should belong to. The site must be created beforehand.
    # See [create-site](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/create-site.html) for more information.
    name: "Default"
    displayName: " "
    # -- The address that clients use for connecting to the system. It is also used for generating absolute URLs.
    publicAddress: ""

  # -- Configuration of the Spotfire Server container lifecycle PreStop hook.
  draining:
    # -- Enables or disables the container lifecycle PreStop hook.
    enabled: true
    # -- The draining timeout in seconds after which the service is forcibly shut down.
    timeoutSeconds: 180
    # -- The minimum time in seconds that the server should be draining, even if it is considered idle.
    minimumSeconds: 90
    # -- Makes sure that service SRV records are preserved while terminating pods, typically used with the spotfire haproxy deployment.
    publishNotReadyAddresses: true

  # -- Configuration properties
  # The key name is the name of the property to set.
  # If the value is a scalar the configuration tool command `set-config-prop` is used.
  # To set a list or map the value should have the keys `itemName` and `value`.
  # If the value is a map or object the configuration tool command `set-config-map-prop` is used.
  # If the value is a list the configuration tool command `set-config-list-prop` is used.
  # @default -- Default values for kubernetes, see values.yaml.
  properties:
    # Map example:
    # set-config-map-prop --name="tomcat.remote-ip-filter.init-parameters" --item-name="parameter" -VportHeader=X-Forwarded-Port -VproxiesHeader=X-Forwarded-By
    # tomcat.remote-ip-valve.attributes:
    #  itemName: parameter
    #  value: {"portHeader": "X-Forwarded-Port", "proxiesHeader": "X-Forwarded-By"}
    #
    # List example: 
    # set-config-list-prop --name="security.allowed-http-methods" --item-name="method-name" -VGET -VHEAD -VPOST -VPUT -VDELETE -VPATCH
    # security.allowed-http-methods:
    #   itemName: method-name
    #   value: ["GET", "HEAD", "POST", "PUT", "DELETE", "PATCH""]

    # Various Kubernetes properties
    performance-monitoring.metrics-exporter.enabled: true
    status-controller.enabled: true
    monitoring.haproxy-agent-check.enabled: true
    security.trust.auto-trust.enabled: true
    general.calculate-public-address-per-request: true
    tomcat.remote-ip-valve.enabled: true
    nodemanager.expire-offline: 5

    # Reduce number of idle connections
    data-sources.default.connection-timeout: 10
    data-sources.default.min-connections: 1

    # Monitor and handle changes, draining timeouts are multiples of monitor interval
    lifecycle.changes-monitoring.interval-seconds: 30
    lifecycle.changes-monitoring.database-schema-change-action: IMMEDIATE_SHUTDOWN
    lifecycle.changes-monitoring.technical-version-change-action: IGNORE
    lifecycle.changes-monitoring.configuration-change-action: GRACEFUL_SHUTDOWN
    lifecycle.changes-monitoring.draining.shutdown: true

  deployment:
    # -- When enabled spotfire deployment areas will be created by the configuration job. See also `volumes.deployment`.
    enabled: true

    # -- Clear existing packages before any new files are added. Setting it `true` can cause extra delay because packages need to be added again every time the config-job is run.
    clear: false

    defaultDeployment:
      # -- Create deployment area with default Spotfire.Dxp.sdn taken from spotfire-deployment image.
      # *Warning*: If set to `true` and a deployment volume (see `volumes.deployments` key) is used, a folder with name `deploymentAreaName` will be created and potentially overwrite any existing deployment with the same name on the persistent volume.
      enabled: true
      # -- The name of the deployment area to create or update
      deploymentAreaName: "Production"
      # spotfire-deployment image settings
      image:
        # -- The image registry for spotfire-deployment. Overrides `global.spotfire.image.registry` value.
        registry:
        # -- The spotfire-deployment image repository.
        repository: spotfire/spotfire-deployment
        # -- The container image tag to use.
        tag: "14.1.0-2.1.0"
        # -- The spotfire-deployment image pull policy. Overrides `global.spotfire.image.pullPolicy`.
        pullPolicy:
        ## Optionally specify an array of imagePullSecrets.
        # image.pullSecrets -- spotfire-deployment image pull secrets.
        pullSecrets: []

  # -- Action log settings. See [config-action-logger](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/config-action-logger.html) for more information.
  # @default -- File logging enabled, database logging disabled.
  actionLog:
    # -- Action log categories and webCategories are a comma separated list of categories. See [config-action-logger](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/action_log_categories.html) for a list of possible categories.
    # default value when empty is "all"
    categories: ""
    webCategories: ""
    file:
      # -- Enable write to file. See [config-action-logger --file-logging-enabled](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/config-action-logger.html) for more information.
      enabled: true
    database:
      # -- Enable write to database. See [config-action-logger --database-logging-enabled](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/config-action-logger.html) for more information.
      enabled: false
      # -- Create the actionlog database. See [create-actionlogdb](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/create-actionlogdb.html) for more information.
      # @default -- Actionlog database is created only if configuration.actionLog.enabled is true
      create-actionlogdb:
        # -- if enabled is true, create the actionlog database
        enabled: true
        # -- Name for the Actionlog Database to be created to hold the Actionlog database table.
        actiondbDbname: "spotfire_actionlog"
        # -- Admin username for the actionlog database.
        adminUsername: "postgres"
        # -- Like `configuration.actionLog.database.config-action-log-database-logger.databaseUrl` but is used for the connection when creating the actionlog database. Evaluated as a template.
        databaseUrl: "jdbc:postgresql://HOSTNAME/"
        # -- Admin password for the actionlog database.
        adminPassword: ""
        # -- Read spotfire actionlog database password from an existing secret. If set, 'adminPassword' above is not used.
        # @default -- Not used unless .name is set
        adminPasswordExistingSecret:
          ## -- Name of the secret. Evaluated as a template.
          name: ""
          ## -- Key to read the spotfire database password from. Evaluated as a template.
          key: ACTIONDB_ADMIN_PASSWORD
        # -- For connecting to MS SQL or Oracle on Amazon RDS, specify `rds`, for MS SQL on Azure, specify `azure`, otherwise omit the option.
        variant: ""
        # -- Set this to true, in case supported databases (AWS Postgres, Aurora Postgres, Azure Postgres, Google Cloud Postgres) does not allow user creation
        # or the actionlog records are being stored on the spotfire database.
        doNotCreateUser: false
        oracleTablespacePrefix: ""
        # -- Specify the value in case of Oracle database, otherwise keep it blank.
        oracleRootfolder: ""
        # -- Specifies the timeout, in seconds, for the operation.
        timeoutSeconds: ""
      # -- Configure actionlog database. See [config-action-log-database-logger](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/config-action-log-database-logger.html) for more information.
      # @default -- Configuration of actionlog database settings is only applicable if configuration.actionLog.enabled is true
      config-action-log-database-logger:
        driverClass: "org.postgresql.Driver"
        databaseUrl: "jdbc:postgresql://HOSTNAME/spotfire_actionlog"
        # -- The user to create for actionlog database access
        username : "spotfire_actionlog"
        # -- The password to be created for the Spotfire Actionlog database user.
        # If not provided, this password is automatically generated.
        password:  ""
        passwordExistingSecret:
          ## -- Name of the secret. Evaluated as a template.
          name: ""
          ## -- Key to read the spotfire database password from. Evaluated as a template.
          key: ACTIONDB_PASSWORD
        # -- Additional Options. See [config-action-log-database-logger - Options](https://docs.tibco.com/pub/spotfire_server/latest/doc/html/TIB_sfire_server_tsas_admin_help/server/topics/config-action-log-database-logger.html) for more information.
        additionalOptions: {}
          # commit-period: ""
          # wait-on-full-queue-time: ""
          # wait-on-empty-queue-time: ""
          # grace-period: ""
          # pruning-period: ""
          # queue-size: ""
          # batch-size: ""
          # thread-pool-size: ""
          # workers: ""
          # block-on-full-queue: true
          # prioritized-categories: "" 
          # monitoring-retention-span: ""
          # monitoring-average-period: ""
          # log-local-time: false
troubleshooting:
  jvm:
    heapDumpOnOutOfMemoryError:
      # -- Enable or disable for a heap dump in case of OutOfMemoryError.
      enabled: true
      # -- Define a path where the generated dump is exported.
      # By default, this gets mounted in EmptyDir: {} internally, which survives container restarts.
      # In case you want to persist troubleshooting information to an external location, you can override the default behaviour by specifying PVC in `volumes.troubleshooting`.
      dumpPath: /opt/spotfire/troubleshooting/jvm-heap-dumps

spotfireServerJava:
  # -- Additional `JAVA_OPTS` for spotfire-server pods.
  ## Example
    ## extraJavaOpts:
    ##  - -Dsystem.property=value
  extraJavaOpts: []

# ===============================
# haproxy
# ===============================
haproxy:
  enabled: true
  podSecurityPolicy:
    create: false
  kind: Deployment

  service:
    # -- Sets the service haproxy service proxies traffic to the spotfire-server service. ClusterIP or LoadBalancer.
    type: ClusterIP

  # Temporary workaround to address an issue in chart version 1.7.0. See
  # https://github.com/haproxytech/helm-charts/commit/bcb6d2621192d409c00e03db4ca351b26d2dfc01#diff-c1b4de66e84520a1bd950f258cc22cfebe60117c19a4af830b27f15fd7858dad.
  extraVolumeMounts:
    - name: chart-fix
      mountPath: /tmp/chart/fix
  extraVolumes:
    - name: chart-fix
      emptyDir: {}

  # -- Prometheus annotations. Should match the haproxy.config settings.
  podAnnotations:
    prometheus.io/path: "/metrics"
    prometheus.io/port: "1024"
    prometheus.io/scrape: "true"

  podLabels:
    #app.kubernetes.io/name: {{ include "spotfire-nodemanager.name" . }}
    #app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: spotfire
    app.kubernetes.io/component: haproxy

  # -- Spotfire specific configuration related to haproxy.
  # @default -- Caching of static resource and debug response headers enabled.
  spotfireConfig:
    # -- Specifies if debug response headers should be enabled.
    debug: false

    compression:
      enabled: true
      algo: gzip
      type: "text/html text/plain"

    # -- haproxy related timeouts
     # @default -- haproxy timeouts
    timeouts:
      # -- See [haproxy timeout client](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4.2-timeout%20client).
      client: 30m
      # -- See [haproxy timeout connect](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4.2-timeout%20connect).
      connect: 300ms
      # -- See [haproxy timeout queue](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4-timeout%20queue).
      queue: 60s
      # -- See [haproxy timeout server](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4.2-timeout%20server).
      server: 30m
      # -- See [haproxy timeout tunnel](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4.2-timeout%20tunnel).
      tunnel: 31m
      # -- See [haproxy timeout http-request](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4.2-timeout%20http-request).
      httpRequest: 3600s
    # -- Cookie-related configuration.
    # @default -- stateless load balancing
    loadBalancingCookie:
      name: SFLB
      # -- dynamic-cookie-key value in the haproxy config.
      # @default -- the cookie key
      dynamicCookieKey: "Sp0tf1re01"
      # -- Attributes for the cookie value in the haproxy config. See [haproxy cookie](https://cbonte.github.io/haproxy-dconv/2.6/configuration.html#4.2-cookie) for more information.
      attributes: insert indirect nocache dynamic httponly secure attr "SameSite=None"
    cleanup:
      # -- If the SameSite cookie attribute should be removed for HTTP connections in Set-Cookie response headers, then it might be needed in cases where both HTTP and HTTPS are enabled, and upstream servers set this unconditionally.
      sameSiteCookieAttributeForHttp: true
      # -- If incorrect, then the secure cookie attribute should be removed for HTTP connections in the Set-Cookie response headers.
      secureCookieAttributeForHttp: true
    # @default --
    serverTemplate:
      # -- Additional parameters, see [haproxy server](https://cbonte.github.io/haproxy-dconv/2.6/snapshot/configuration.html#server%20%28Alphabetically%20sorted%20keywords%20reference%29)
      additionalParams: on-marked-down shutdown-sessions
    # @default -- only applicable when spotfireConfig.debug is enabled and used for troubleshooting of reverse proxies and X-Forwarded-* headers
    captures:
      # -- The maximum number of characters captured from the X-Forwarded-For request header
      forwardedForLength: 36
    # @default --
    agent:
      # -- Spotfire Server haproxy agent-port.
      port: 9081
    # -- Caching of static resources
    # @default -- enabled
    cache:
      enabled: true
      totalMaxSizeMegabytes: 100
      maxAgeSeconds: "10485760"
      maxObjectSizeBytes: "10485760"

    # -- Maintenance mode, can be used to temporarily block requests (but still allow some, see allowCookie below).
    # @default -- disabled
    maintenance:
      # -- Specifies if maintenance mode is enabled.
      enabled: false
      # -- Allowed requests in maintenance mode by configuring a cookie for allowed requests.
      # @default -- disabled
      allowCookie:
        # -- Specifies if a cookie can be used to access the environment while maintenance mode is enabled.
        enabled: false
        # -- The name of the cookie, case sensitive
        name: ""
        # -- The value of the cookie, case sensitive
        value: ""
    # -- A custom maintenance page that is displayed if maintenance mode is enabled or if no Spotfire Server instances are running
    # @default -- maintenance page related settings
    maintenancePage:
        # -- If a haproxy include file,  haproxy.includes.'maintenance\\.html'=<path to file>, should be used instead of haproxy.maintenancePage.responseString below.
        useFile: false
        # -- For larger files, haproxy tune.bufsize may need to be increased to accommodate the larger size.
        bufSize: 24576
        # -- The maintenance page response string.
        responseString: "<html><title>Maintenance - </title><body>Maintenance in progress</body></html>"

  # -- The haproxy configuration file template. For implementation details see templates/haproxy-config.tpl.
  # @default -- The chart creates a configuration automatically.
  config: '{{ include "spotfire-server.haproxy.config" . }}'

  includes: {}

  includesMountPath: /etc/haproxy/includes

# ===============================
# fluent-bit (also known as "log-forwarder")
# ===============================
# The values listed below are provided to the fluent-bit helm chart.
# See https://github.com/fluent/helm-charts/blob/main/charts/fluent-bit/values.yaml for a description of available values.
log-forwarder:
  # -- enables or disables the fluent-bit log-forwarder pod.
  # If enabled, it collects logs from the spotfire-server pods and can forward traffic to any output supported by fluent-bit.
  enabled: true
  rbac:
    # -- Specifies whether to create an RBAC for the fluent-bit / log-forwarder.
    # Setting this to `true` requires additional privileges in the Kubernetes cluster.
    create: false
  kind: Deployment
  extraPorts:
    - port: 5170
      protocol: TCP
      name: json
      containerPort: 5170
    - port: 24224
      protocol: TCP
      name: forward
      containerPort: 24224
  image:
    pullPolicy: IfNotPresent
  podAnnotations:
    prometheus.io/path: /api/v1/metrics/prometheus
    prometheus.io/port: "2020"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/part-of: spotfire
    app.kubernetes.io/component: logging
  service:
    labels:
      app.kubernetes.io/part-of: spotfire
      app.kubernetes.io/component: logging
  podLabels:
    app.kubernetes.io/part-of: spotfire
    app.kubernetes.io/component: logging
  config:
    # -- Override this value with an [output configuration](https://docs.fluentbit.io/manual/pipeline/outputs) to send logs to an external system.
    # @default -- Logs are written to stdout of the log-forwarder pod.
    outputs: |
      [OUTPUT]
          Name        stdout
          Match_Regex (tss|tsnm)\..*

    # -- fluent-bit [input configuration](https://docs.fluentbit.io/manual/pipeline/inputs).
    # @default -- [tcp input](https://docs.fluentbit.io/manual/pipeline/inputs/tcp) on port 5170 and [forward input](https://docs.fluentbit.io/manual/pipeline/inputs/forward) on port 24224
    inputs: |
      [INPUT]
          Name        tcp
          Listen      0.0.0.0
          Port        5170
          Chunk_Size  1M
          Buffer_Size 6M
          Format      json

      [INPUT]
          Name              forward
          Listen            0.0.0.0
          Port              24224
          Buffer_Chunk_Size 1M
          Buffer_Max_Size   6M

    # -- Add custom fluent-bit [filters configuration](https://docs.fluentbit.io/manual/pipeline/filters).
    # @default -- Example that drops specific events using [grep](https://docs.fluentbit.io/manual/pipeline/filters/grep)
    filters: |
      [FILTER]
          Name     grep
          Alias    tss.actionlog
          Match    tss.actionlog
          Exclude  Category node_communication
